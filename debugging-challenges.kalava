{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1TzU7E9r2yNg48aBxEK6uICcVF8QVn4e2","timestamp":1674902998722}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Debugging Python code\n","\n","Go through the exercises below.\n","\n","- Each exercise contains some code with **one or more mistakes** on it.\n","- The mistakes can either prompt an error or not.\n","- There might be multiple ways to fix the mistakes.\n","- Improving the code readibility is also encourage."],"metadata":{"id":"eGqyDOiK4nv5"}},{"cell_type":"code","source":["# data creation\n","beatles = [\"John Lennon\", \"Paul McCartney\", \"George Harrison\", \"Ringo Star\"]\n","\n","numbers = [1, 2, 3, 4, 5]\n","\n","capitals = {\"Germany\": \"Berlin\",\n","            \"Russia\": \"Moscow\",\n","            \"France\": \"Paris\",\n","            \"China\": \"Beijing\",\n","            \"Egypt\": \"Cairo\",\n","            \"Brazil\": \"Sao Paulo\"\n","            }\n","\n","top_profitable_films = {\n","    \"Film\": [\"Avengers: Endgame\", \"Avatar\", \"Titanic\", \"Star Wars: The Force Awakens\", \"Jurassic World\",\n","             \"The Lion King\", \"The Avengers\", \"Frozen II\", \"Frozen\", \"Beauty and the Beast\"],\n","    \"Year\": [\"2019\", \"2007\", \"1997\", \"2015\", \"2015\", \"2019\", \"2012\", \"2019\", \"2013\", \"2017\"],\n","    \"Worldwide Gross (in billions)\": [\"2.798\", \"2.789\", \"2.194\", \"2.073\", \"1.673\", \"1.656\", \"1.519\",\n","                                      \"1.450\", \"1.276\", \"1.263\"]\n","    }"],"metadata":{"id":"7teQ1W7aJKqR"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Exercise 1:"],"metadata":{"id":"BaJkDo5mMZX2"}},{"cell_type":"code","source":["for c in capitals.keys():\n","  print(f\"{c} is the capital of {capitals[c]}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"05L7VqDMKfx2","executionInfo":{"status":"ok","timestamp":1674903062048,"user_tz":-60,"elapsed":427,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"31394fa9-c93e-4ed8-af5d-85b8c7ac5776"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Germany is the capital of Berlin\n","Russia is the capital of Moscow\n","France is the capital of Paris\n","China is the capital of Beijing\n","Egypt is the capital of Cairo\n","Brazil is the capital of Sao Paulo\n"]}]},{"cell_type":"code","source":["# your code here"],"metadata":{"id":"6pVyeB8poUGk"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Exercise 2:\n","Let's imagine we want to show our love for Ringo Star and print a love statement for him as many times as numbers are in the `numbers` list. For all Beatles who are not Ringo, we want to print as many times a hate statement. The output should look like this:\n","\n","```\n","I hate John Lennon!\n","I hate Paul McCartney!\n","I hate George Harrison!\n","I love Ringo Star!\n","\n","\n","I hate John Lennon!\n","I hate Paul McCartney!\n","I hate George Harrison!\n","I love Ringo Star!\n","\n","\n","I hate John Lennon!\n","I hate Paul McCartney!\n","I hate George Harrison!\n","I love Ringo Star!\n","\n","\n","I hate John Lennon!\n","I hate Paul McCartney!\n","I hate George Harrison!\n","I love Ringo Star!\n","\n","\n","I hate John Lennon!\n","I hate Paul McCartney!\n","I hate George Harrison!\n","I love Ringo Star!\n","```\n","\n"],"metadata":{"id":"Ktqf8UlUT7Wo"}},{"cell_type":"code","source":["for n in numbers:\n"," for beatle in beatles:\n","   if beatle == \"Ringo Star\":\n","      print(f\"I love {beatle}!\")\n","      print(\"\\n\")\n","   if beatle != \"Ringo Star\":\n","      print(f\"I hate {beatle}!\")\n",""],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cb212PumTUM-","executionInfo":{"status":"ok","timestamp":1674903369245,"user_tz":-60,"elapsed":485,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"4dc479e8-155d-4c27-d79b-47dcec7294ad"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["I hate John Lennon!\n","I hate Paul McCartney!\n","I hate George Harrison!\n","I love Ringo Star!\n","\n","\n","I hate John Lennon!\n","I hate Paul McCartney!\n","I hate George Harrison!\n","I love Ringo Star!\n","\n","\n","I hate John Lennon!\n","I hate Paul McCartney!\n","I hate George Harrison!\n","I love Ringo Star!\n","\n","\n","I hate John Lennon!\n","I hate Paul McCartney!\n","I hate George Harrison!\n","I love Ringo Star!\n","\n","\n","I hate John Lennon!\n","I hate Paul McCartney!\n","I hate George Harrison!\n","I love Ringo Star!\n","\n","\n"]}]},{"cell_type":"code","source":["# your code here"],"metadata":{"id":"J69Sx-XfoafE"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Exercise 3:"],"metadata":{"id":"cOKlhWRqMQF1"}},{"cell_type":"code","source":["import pandas as pd\n","top_profitable_films = pd.DataFrame(top_profitable_films)\n","top_profitable_films"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":201},"id":"h6PF4HQfMiex","executionInfo":{"status":"error","timestamp":1674912350677,"user_tz":-240,"elapsed":777,"user":{"displayName":"Rahmath K","userId":"01497281466072143755"}},"outputId":"c06a4a07-6987-4c58-ca85-b4918bd9940c"},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-1bd4a0779e2a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mtop_profitable_films\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtop_profitable_films\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mtop_profitable_films\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'top_profitable_films' is not defined"]}]},{"cell_type":"code","source":["# your code here"],"metadata":{"id":"WbQipHEgoe-m"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Exercise 4:"],"metadata":{"id":"nuQNxD6HOcMP"}},{"cell_type":"code","source":["top_profitable_films.loc[(top_profitable_films[\"Film\"]== \"Avatar\") , \"Year\"]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"03M8YhGWRW5f","executionInfo":{"status":"ok","timestamp":1674904200685,"user_tz":-60,"elapsed":511,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"eda8e908-f170-4b71-d4f0-d3140039b834"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1    2007\n","Name: Year, dtype: object"]},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["# your code here"],"metadata":{"id":"EqszsErnolRF"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Exercise 5:\n","\n","We want to get the average gross profit for each film:"],"metadata":{"id":"OwCeBaNYS_aM"}},{"cell_type":"code","source":["top_profitable_films.groupby(\"Film\").agg({\"Worldwide Gross (in billions)\": \"mean\"}).sort_values(by = \"Worldwide Gross (in billions)\", ascending = False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":394},"id":"ChhryXzVZK4G","executionInfo":{"status":"ok","timestamp":1674904423354,"user_tz":-60,"elapsed":431,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"00244598-29a3-4ddf-8138-41bc6ff8b45d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                              Worldwide Gross (in billions)\n","Film                                                       \n","Avengers: Endgame                                     2.798\n","Avatar                                                2.789\n","Titanic                                               2.194\n","Star Wars: The Force Awakens                          2.073\n","Jurassic World                                        1.673\n","The Lion King                                         1.656\n","The Avengers                                          1.519\n","Frozen II                                             1.450\n","Frozen                                                1.276\n","Beauty and the Beast                                  1.263"],"text/html":["\n","  <div id=\"df-34a000f0-90f2-43d9-ab8f-01fa2c412f74\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Worldwide Gross (in billions)</th>\n","    </tr>\n","    <tr>\n","      <th>Film</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Avengers: Endgame</th>\n","      <td>2.798</td>\n","    </tr>\n","    <tr>\n","      <th>Avatar</th>\n","      <td>2.789</td>\n","    </tr>\n","    <tr>\n","      <th>Titanic</th>\n","      <td>2.194</td>\n","    </tr>\n","    <tr>\n","      <th>Star Wars: The Force Awakens</th>\n","      <td>2.073</td>\n","    </tr>\n","    <tr>\n","      <th>Jurassic World</th>\n","      <td>1.673</td>\n","    </tr>\n","    <tr>\n","      <th>The Lion King</th>\n","      <td>1.656</td>\n","    </tr>\n","    <tr>\n","      <th>The Avengers</th>\n","      <td>1.519</td>\n","    </tr>\n","    <tr>\n","      <th>Frozen II</th>\n","      <td>1.450</td>\n","    </tr>\n","    <tr>\n","      <th>Frozen</th>\n","      <td>1.276</td>\n","    </tr>\n","    <tr>\n","      <th>Beauty and the Beast</th>\n","      <td>1.263</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-34a000f0-90f2-43d9-ab8f-01fa2c412f74')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-34a000f0-90f2-43d9-ab8f-01fa2c412f74 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-34a000f0-90f2-43d9-ab8f-01fa2c412f74');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["# your code here"],"metadata":{"id":"-6k9YAj9oqzn"},"execution_count":null,"outputs":[]}]}